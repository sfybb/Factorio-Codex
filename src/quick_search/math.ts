/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import Quantity from './Quantity'

function splitString(str: string, delimiter: string) {
    let result: string[] = []
    let pattern =string.format("([^%s]+)", delimiter)
    string.gsub(str, pattern, (...matches) => {
        result.push(matches[0])
        return undefined as unknown as string
    })
    return result.length != 0 ? result : undefined
}

type YY_State = {

}

type YYLoc = {
    first_line: number
    last_line: number
    first_column: number
    last_column: number
    range: [number, number]
}

type YACC_State = {
    yy: YY_State
    yylloc: YYLoc
    yyleng: number
    yytext: string
    yylineno: number

    match: string
    matches: string[]
    matched: string
    offset: number
    conditionStack: string[]

    _more: boolean
    _input: string
    done: boolean
}



/* generated by jison-lex 0.3.4 */
class Lexer {
    EOF = 1


    conditionStack: string[] = []

    match: string = ""
    matches: string[] = []
    matched: string = ""
    offset: number = 0
    last_line: number = 0

    _input: string = ""
    _backtrack: boolean = false
    _more: boolean = false
    done: boolean = false

    yy: YY_State = {}
    yylloc: YYLoc
    yyleng: number
    yytext: string
    yylineno: number

    options: {
        ranges?: boolean
        flex?: boolean
        backtrack_lexer?: boolean
    } = {}

    static parseError(str: string, hash: any) {
        Parser.parseError(str, hash);
    }
    
    constructor() {
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [0, 0]
        }
        
        this.yyleng = 0
        this.yytext = ""
        this.yylineno = 0
    }

// resets the lexer, sets new input
    setInput(input: string, yy: YY_State) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [0, 0]
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    }

// consumes and returns one char from the input
    input() {
        let ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // FIXME: REGEX (DONE?)
        let lines = splitString(ch, "\n");
        if (lines !== undefined) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    }

// unshifts one char (or a string) into the input
    unput(ch: string) {
        let len = ch.length;
        // FIXME: REGEX (DONE?)
        let lines = splitString(ch, "\n");

        this._input = ch + this._input;
        this.yytext = this.yytext.substring(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        // FIXME: REGEX (DONE?)
        let oldLines = splitString(this.match, "\n");
        this.match = this.match.substring(0, this.match.length - 1);
        this.matched = this.matched.substring(0, this.matched.length - 1);

        if (lines != undefined && lines.length - 1 !== 0) {
            this.yylineno -= lines.length - 1;
        }
        let r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines != null && oldLines != null ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len,
            range: [0, 0]
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[1], r[1] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    }

// When called from action, caches matched text and appends it on next action
    more() {
        this._more = true;
        return this;
    }

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    reject() {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return Lexer.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    }

// retain first n characters of the match
    less(n: number) {
        this.unput(this.match.slice(n));
    }

// displays already matched input, i.e. for error messages
    pastInput() {
        let past = this.matched.substring(0, this.matched.length - this.match.length);
        // FIXME: REGEX (DONE?)
        return `${past.length > 20 ? '...' : ''}${string.gsub(past.substr(-20), "\n", "")[0]}`;
    }

// displays upcoming input, i.e. for error messages
    upcomingInput(): string {
        let next = this.match;
        if (next.length < 20) {
            next += this._input.substring(0, 20 - next.length);
        }
        // FIXME: REGEX (DONE?)
        return string.gsub(next.substring(0, 20) + (next.length > 20 ? '...' : ''), "\n", "")[0];
    }

// displays the character position where the lexing error occurred, i.e. for error messages
    showPosition(): string {
        let pre = this.pastInput();
        let c = string.rep("-", pre.length + 1);
        return `${pre + this.upcomingInput()}\n${c}^`;
    }

// test the lexed token: return FALSE when not a match, otherwise return token
    test_match(match: string[], indexed_rule: number) {
        let token,
            lines,
            backup: YACC_State | undefined;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    ...this.yylloc
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: [...this.conditionStack],
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = [...this.yylloc.range];
            }
        }

        $log_trace!(serpent.line(match))
        // FIXME: REGEX (DONE?)
        lines = splitString(match[0], "\n")
        if (lines !== undefined) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines !== undefined ?
                lines[lines.length - 1].length - (lines[lines.length - 1] === "\n" ? 1 : 0) :
                this.yylloc.last_column + match[0].length,
            range: [0, 0]
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction(this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            if (backup != undefined) {
                for (let k in backup) {
                    // @ts-ignore
                    this[k] = backup[k];
                }
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    }

// return next match in input
    next() {
        if (this.done) {
            return this.EOF;
        }
        if (this._input == undefined) {
            this.done = true;
            this._input = ""
        }

        let token,
            match: string[] | undefined,
            tempMatch: string[] | undefined,
            index: number = 0;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        let rules = this._currentRules();
        for (let i = 0; i < rules.length; i++) {
            // FIXME: REGEX
            tempMatch = [...string.match(this._input, this.rules[rules[i]])];
            $log_trace!(`Matching: ${serpent.line(this.rules[rules[i]])}; '${this._input}' => ${serpent.line(tempMatch)}`)
            if(tempMatch.length == 0) tempMatch = undefined
            if (tempMatch != undefined && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false as unknown as string[];
                        // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            $log_trace!(`Matched: ${serpent.line(match)}`)
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return Lexer.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    }

// return next match that has a token
    lex(): any {
        let r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    }

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    begin(condition: string) {
        this.conditionStack.push(condition);
    }

// pop the previously active lexer condition state off the condition stack
    popState() {
        let n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    }

// produce the lexer rule set which is active for the currently active lexer condition state
    _currentRules(): number[] {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1] != undefined) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    }

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    topState(n: number) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    }

// alias for begin(condition)
    pushState(condition: string) {
        this.begin(condition);
    }

// return the number of states currently on the stack
    stateStackSize() {
        return this.conditionStack.length;
    }
    
    performAction(yy: YY_State, yy_: Lexer, $avoiding_name_collisions: number, YY_START: string): any | undefined {
        let YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
            case 0:/* skip whitespace */
                break;
            case 1:return 18
            case 2:return 11
            case 3:return 12
            case 4:return 10
            case 5:return 9
            case 6:return 14
            case 7:return 15
            case 8:return 13
            case 9:return 16
            case 10:return 24
            case 11:return 5
            case 12:return 19
        }
    }

    // FIXME: REGEX
    rules = ["^(%s+)", "^(%d+%.?%d*)", "^(%*)", "^(%/)", "^(%-)", "^(%+)", "^(%^)", "^(%!)", "^(%%)", "^(%()", "^(%))", "^$", "^(%a*)"]

    conditions: any = {
        "INITIAL": {
            "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
            "inclusive": true
        }
    }
}

class Parser {
    static trace(str: string) {
    }

    constructor() {
        this.yy = {};
    }

    $: any

    yy = {}
    symbols_:{[k: string]: number} = {
        "error": 2,
        "expressions": 3,
        "AdditiveExpression": 4,
        "EOF": 5,
        "exp": 6,
        "factor": 7,
        "partial_exp": 8,
        "PLUS": 9,
        "MINUS": 10,
        "TIMES": 11,
        "DIVIDE": 12,
        "MODULO": 13,
        "POWER": 14,
        "FACTORIAL": 15,
        "LPAREN": 16,
        "exp[RPAREN]": 17,
        "NUMBER": 18,
        "IDENTIFIER": 19,
        "MultiplicativeExpression": 20,
        "ExponentialExpression": 21,
        "UnaryExpression": 22,
        "PrimaryExpression": 23,
        "RPAREN": 24,
        "$accept": 0,
        "$end": 1
    }
    terminals_: { [k: number]: string } = {
        2: "error",
        5: "EOF",
        9: "PLUS",
        10: "MINUS",
        11: "TIMES",
        12: "DIVIDE",
        13: "MODULO",
        14: "POWER",
        15: "FACTORIAL",
        16: "LPAREN",
        17: "exp[RPAREN]",
        18: "NUMBER",
        19: "IDENTIFIER",
        24: "RPAREN"
    }
    productions_: (number | number[])[] = [0, [3, 2], [3, 1], [6, 1], [6, 3], [6, 3], [6, 3], [6, 3], [6, 3], [6, 3], [6, 3], [6, 2], [6, 2], [6, 2], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [7, 2], [7, 1], [7, 1], [4, 1], [4, 3], [4, 3], [4, 3], [4, 3], [20, 1], [20, 3], [20, 3], [20, 3], [20, 3], [20, 3], [20, 3], [21, 1], [21, 3], [21, 3], [22, 1], [22, 2], [22, 2], [23, 1], [23, 3]]
    performAction(yytext: string, yyleng: number, yylineno: number, yy: any, yystate: any /* action[1] */, $$: any[] /* vstack */, _$: any /* lstack */) {
        /* this == l */
        let q_stack: Quantity[] = $$
        let stack_len = $$.length - 1
        switch (yystate) {
            case 1:
                $log_trace!("EOF:\t" + q_stack[stack_len - 1].toString());
                return $$[stack_len - 1];
            case 2:
                $log_trace!("end:\t" + q_stack[stack_len].toString());
                return q_stack[stack_len];
            case 4: case 26: case 27: case 32: case 33: case 34:
                this.$ = q_stack[stack_len-2];
                break;
            case 5: case 24:
                this.$ = q_stack[stack_len-2].add(q_stack[stack_len]);
                break;
            case 6: case 25:
                this.$ = q_stack[stack_len-2].sub(q_stack[stack_len]);
                break;
            case 7: case 29:
                this.$ = q_stack[stack_len-2].mul(q_stack[stack_len]);
                break;
            case 8: case 30:
                this.$ = q_stack[stack_len-2].div(q_stack[stack_len]);
                break;
            case 9: case 31:
                this.$ = q_stack[stack_len-2].mod(q_stack[stack_len]);
                break;
            case 10: case 36: case 37:
                this.$ = q_stack[stack_len-2].pow(q_stack[stack_len]);
                break;
            case 11: case 39:
                this.$ = q_stack[stack_len-1].factorial();
                break;
            case 12: case 40:
                this.$ = q_stack[stack_len].mul(-1);
                break;
            case 13: case 19:
                this.$ = q_stack[stack_len];
                break;
            case 20:
                this.$ = Quantity.fromNumberWithUnit(Number($$[stack_len-1]), $$[stack_len]);
                break;
            case 21:
                this.$ = Quantity.fromNumber(Number($$[stack_len]));
                break;
            case 22:
                this.$ = Quantity.fromUnit($$[stack_len]);
                break;
            case 42:
                this.$ = $$[stack_len-1];
                break;
        }
    }

    table: {[key: number]: number | number[]}[] = [
        {3:1,4:2,7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],20:3,21:4,22:5,23:6},
        {1:[3]},
        {1:[2,2],5:[1,12],9:[1,13],10:[1,14]},
        {1:[2,23],5:[2,23],9:[2,23],10:[2,23],11:[1,15],12:[1,16],13:[1,17]},
        {1:[2,28],5:[2,28],9:[2,28],10:[2,28],11:[2,28],12:[2,28],13:[2,28]},
        {1:[2,35],5:[2,35],9:[2,35],10:[2,35],11:[2,35],12:[2,35],13:[2,35],14:[1,18],15:[1,19]},
        {1:[2,38],5:[2,38],9:[2,38],10:[2,38],11:[2,38],12:[2,38],13:[2,38],14:[2,38],15:[2,38]},
        {7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],22:20,23:6},
        {1:[2,41],5:[2,41],9:[2,41],10:[2,41],11:[2,41],12:[2,41],13:[2,41],14:[2,41],15:[2,41]},
        {6:21,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {1:[2,21],5:[2,21],9:[2,21],10:[2,21],11:[2,21],12:[2,21],13:[2,21],14:[2,21],15:[2,21],19:[1,25],24:[2,21]},
        {1:[2,22],5:[2,22],9:[2,22],10:[2,22],11:[2,22],12:[2,22],13:[2,22],14:[2,22],15:[2,22],24:[2,22]},
        {1:[2,1]},
        {4:26,5:[1,27],7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],20:3,21:4,22:5,23:6},
        {4:28,5:[1,29],7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],20:3,21:4,22:5,23:6},
        {5:[1,31],7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],20:30,21:4,22:5,23:6},
        {5:[1,33],7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],20:32,21:4,22:5,23:6},
        {5:[1,35],7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],20:34,21:4,22:5,23:6},
        {5:[1,37],7:8,10:[1,7],16:[1,9],18:[1,10],19:[1,11],22:36,23:6},
        {1:[2,39],5:[2,39],9:[2,39],10:[2,39],11:[2,39],12:[2,39],13:[2,39],14:[2,39],15:[2,39]},
        {1:[2,40],5:[2,40],9:[2,40],10:[2,40],11:[2,40],12:[2,40],13:[2,40],14:[2,40],15:[2,40]},
        {8:39,9:[1,40],10:[1,41],11:[1,42],12:[1,43],13:[1,44],14:[1,45],15:[1,46],24:[1,38]},
        {9:[2,3],10:[2,3],11:[2,3],12:[2,3],13:[2,3],14:[2,3],15:[2,3],24:[2,3]},
        {6:47,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {6:48,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {1:[2,20],5:[2,20],9:[2,20],10:[2,20],11:[2,20],12:[2,20],13:[2,20],14:[2,20],15:[2,20],24:[2,20]},
        {1:[2,24],5:[2,24],9:[2,24],10:[2,24]},
        {1:[2,26],5:[2,26],9:[2,26],10:[2,26]},
        {1:[2,25],5:[2,25],9:[2,25],10:[2,25]},
        {1:[2,27],5:[2,27],9:[2,27],10:[2,27]},
        {1:[2,29],5:[2,29],9:[2,29],10:[2,29],11:[2,29],12:[2,29],13:[1,17]},
        {1:[2,32],5:[2,32],9:[2,32],10:[2,32],11:[2,32],12:[2,32],13:[2,32]},
        {1:[2,30],5:[2,30],9:[2,30],10:[2,30],11:[2,30],12:[2,30],13:[1,17]},
        {1:[2,33],5:[2,33],9:[2,33],10:[2,33],11:[2,33],12:[2,33],13:[2,33]},
        {1:[2,31],5:[2,31],9:[2,31],10:[2,31],11:[2,31],12:[2,31],13:[1,17]},
        {1:[2,34],5:[2,34],9:[2,34],10:[2,34],11:[2,34],12:[2,34],13:[2,34]},
        {1:[2,36],5:[2,36],9:[2,36],10:[2,36],11:[2,36],12:[2,36],13:[2,36],15:[1,19]},
        {1:[2,37],5:[2,37],9:[2,37],10:[2,37],11:[2,37],12:[2,37],13:[2,37]},
        {1:[2,42],5:[2,42],9:[2,42],10:[2,42],11:[2,42],12:[2,42],13:[2,42],14:[2,42],15:[2,42]},
        {5:[1,49]},
        {5:[2,14],6:50,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {5:[2,15],6:51,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {5:[2,16],6:52,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {5:[2,17],6:53,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {5:[2,18],6:54,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {5:[2,19],6:55,7:22,10:[1,23],16:[1,24],18:[1,10],19:[1,11]},
        {9:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],24:[2,11]},
        {8:39,9:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],24:[2,12]},
        {8:39,9:[2,13],10:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],24:[2,13]},
        {9:[2,4],10:[2,4],11:[2,4],12:[2,4],13:[2,4],14:[2,4],15:[2,4],24:[2,4]},
        {8:39,9:[2,5],10:[2,5],11:[1,42],12:[1,43],13:[1,44],14:[1,45],15:[1,46],24:[2,5]},
        {8:39,9:[2,6],10:[2,6],11:[1,42],12:[1,43],13:[1,44],14:[1,45],15:[1,46],24:[2,6]},
        {8:39,9:[2,7],10:[2,7],11:[2,7],12:[2,7],13:[1,44],14:[1,45],15:[1,46],24:[2,7]},
        {8:39,9:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[1,44],14:[1,45],15:[1,46],24:[2,8]},
        {8:39,9:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[1,44],14:[2,9],15:[2,9],24:[2,9]},
        {8:39,9:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[1,44],14:[2,10],15:[1,46],24:[2,10]}
    ]
    defaultActions = {12:[2,1]}

    static parseError(this: void, str: string, hash: any) {
        if (hash?.recoverable) {
            Parser.trace(str);
        } else {
            let error: any = new Error(str);
            error.hash = hash;
            throw error;
        }
    }
    parse(this: any, input: string) {
        let self = this

        let stack: number[] = [0], tstack: any[] = []
        let vstack: (string | null)[] = [null], lstack:  YYLoc[] = []
        let table: {[p: number]: number | number[]}[] = this.table, yytext = ''
        let yylineno = 0, yyleng = 0, recovering = 0
        const TERROR = 2, EOF = 1;
        let args = [input];
        let lexer: Lexer = new Lexer();
        let sharedState: any = {yy: {}};
        for (let k in this.yy) {
            sharedState.yy[k] = this.yy[k];
        }
        lexer.setInput(input, sharedState.yy);
        sharedState.yy.lexer = lexer;
        sharedState.yy.parser = this;
        if (typeof lexer.yylloc == 'undefined') {
            lexer.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [0, 0]
            };
        }
        let yyloc = lexer.yylloc;
        lstack.push(yyloc);
        let ranges = lexer.options && lexer.options.ranges;

        function popStack(n: number) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
        }
        let lex = function () {
            let token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
        let symbol = undefined, preErrorSymbol, state, action: number[], a, r, yyval: {
            $?: string | null
            _$?: YYLoc
        } = {}, p, len: number, newState: number, expected;
        while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === undefined) {
                    symbol = lex();
                }
                let tmp  = table[state] && table[state][symbol]
                action = typeof tmp == "number" ? [tmp] : tmp;
            }
            $log_trace!(`state: ${state} => ${serpent.line(action)}`)
            if (typeof action === 'undefined' || !action.length || !action[1]) {
                let errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p as unknown as number > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition !== undefined) {
                    errStr = `Parse error on line ${yylineno + 1}:\n${lexer.showPosition()}\nExpecting ${expected.join(', ')}, got '${this.terminals_[symbol] || symbol}'`;
                } else {
                    errStr = `Parse error on line ${yylineno + 1}: Unexpected ${symbol === EOF ? 'end of input' : `'${this.terminals_[symbol] || symbol}'`}`;
                }
                Parser.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
            if (typeof action[0] != "number" && action.length > 1) {
                throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
            }
            $log_trace!(`============= Action ${action[1]} ============= `)
            switch (action[0]) {
                case 1:
                    $log_trace!(`stack << ${symbol} << ${action[2]}`)
                    stack.push(symbol);
                    vstack.push(lexer.yytext);
                    lstack.push(lexer.yylloc);
                    stack.push(action[1]);
                    symbol = null;
                    if (!preErrorSymbol) {
                        yyleng = lexer.yyleng ?? 0;
                        yytext = lexer.yytext ?? "";
                        yylineno = lexer.yylineno ?? 0;
                        yyloc = lexer.yylloc;
                        if (recovering > 0) {
                            recovering--;
                        }
                    } else {
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                    }
                    break;
                case 2:
                    len = (this.productions_[action[1] + 1] as number[])[1];
                    let last_item = lstack[lstack.length - 1]
                    let pord_item = lstack[lstack.length - (len || 1)]
                    $log_trace!(`(${len}; ${action[1]}) #${stack.length} ${serpent.line(stack)}`)
                    yyval.$ = vstack[vstack.length - len];
                    yyval._$ = {
                        first_line: pord_item?.first_line ?? 0,
                        last_line: last_item?.last_line ?? 0,
                        first_column: pord_item?.first_column ?? 0,
                        last_column: last_item?.last_column ?? 0,
                        range: [
                            pord_item.range[0],
                            last_item.range[1]
                        ]
                    };

                    let func = this.performAction
                    // change 'this' to 'yyval'
                    r = func(yyval, yytext, yyleng, yylineno, sharedState.yy,
                        action[1], vstack, lstack, args);
                    if (typeof r !== 'undefined') {
                        return r;
                    }
                    if (len > 0) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                    }
                    let prod = (this.productions_[action[1] + 1] as number[])[0]
                    stack.push(prod);
                    vstack.push(yyval.$);
                    lstack.push(yyval._$);
                    $log_trace!(`Stack: ${serpent.line(stack)} Vstack: ${serpent.line(vstack)} Lstack: ${serpent.line(lstack)}`)
                    let s_len = stack.length
                    let a = stack[s_len - 2]
                    newState = table[a][prod] as number;
                    $log_trace!(`New state: ${newState}  table[${a}][${prod}]`)
                    stack.push(newState);
                    break;
                case 3:
                    return true;
            }
        }
        return true;
    }
};

let math = new Parser();

function parse(str: string) {
    return math.parse(str)
}

export default Parser
export {
    math,
    parse
}